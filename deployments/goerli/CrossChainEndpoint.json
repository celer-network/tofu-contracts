{
  "address": "0x7fC7861D7a35A1a951241d3d950a588176388Fd9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_marketNG",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldMarketNG",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMarketNG",
          "type": "address"
        }
      ],
      "name": "MarketNGUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "messageBus",
          "type": "address"
        }
      ],
      "name": "MessageBusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PurchaseCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Refunded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOKEN_1155",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_721",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_MINT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_sender",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "executeMessage",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "executeMessage",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransfer",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransferFallback",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransferRefund",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketNG",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageBus",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "dstCrossChainEndpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "maxSlippage",
          "type": "uint32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "kind",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "mintData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct IMarketNG.TokenPair[]",
                  "name": "bundle",
                  "type": "tuple[]"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "kind",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IMarketNG.Intention",
              "name": "intent",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "intentionHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "txDeadline",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "opcode",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "incentiveRate",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256[]",
                      "name": "coupons",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "feeRate",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "royaltyRate",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "buyerCashbackRate",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "feeAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "royaltyAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct IMarketNG.Settlement",
                  "name": "settlement",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "kind",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "mintData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct IMarketNG.TokenPair[]",
                  "name": "bundle",
                  "type": "tuple[]"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IMarketNG.Detail",
              "name": "detail",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "sigIntent",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "sigDetail",
              "type": "bytes"
            }
          ],
          "internalType": "struct CrossChainEndpoint.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketNG",
          "type": "address"
        }
      ],
      "name": "setMarketNG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "name": "setMessageBus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfa56e4c81f9f1b423ce9deb80f85388745f8c0c9588cc5bbb38f16dc7e88837c",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x7fC7861D7a35A1a951241d3d950a588176388Fd9",
    "transactionIndex": 111,
    "gasUsed": "2787287",
    "logsBloom": "0x
    "blockHash": "0x5449df85f711506469da2bc16e8781473bb368897bb305e0adf948ddbefe3032",
    "transactionHash": "0xfa56e4c81f9f1b423ce9deb80f85388745f8c0c9588cc5bbb38f16dc7e88837c",
    "logs": [
      {
        "transactionIndex": 111,
        "blockNumber": 8523963,
        "transactionHash": "0xfa56e4c81f9f1b423ce9deb80f85388745f8c0c9588cc5bbb38f16dc7e88837c",
        "address": "0x7fC7861D7a35A1a951241d3d950a588176388Fd9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 175,
        "blockHash": "0x5449df85f711506469da2bc16e8781473bb368897bb305e0adf948ddbefe3032"
      }
    ],
    "blockNumber": 8523963,
    "cumulativeGasUsed": "20417412",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF25170F86E4291a99a9A560032Fe9948b8BcFBB2",
    "0x0b61C9AD8a968a14F273F68bbc393516983Df785"
  ],
  "numDeployments": 8,
  "solcInputHash": "c2eb86247250c93c3d0d1b4bc6294314",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketNG\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMarketNG\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMarketNG\",\"type\":\"address\"}],\"name\":\"MarketNGUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageBus\",\"type\":\"address\"}],\"name\":\"MessageBusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PurchaseCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_1155\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_721\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_MINT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_sender\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransfer\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransferFallback\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransferRefund\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketNG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"dstCrossChainEndpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"maxSlippage\",\"type\":\"uint32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"mintData\",\"type\":\"bytes\"}],\"internalType\":\"struct IMarketNG.TokenPair[]\",\"name\":\"bundle\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"}],\"internalType\":\"struct IMarketNG.Intention\",\"name\":\"intent\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"intentionHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"opcode\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentiveRate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"coupons\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerCashbackRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"}],\"internalType\":\"struct IMarketNG.Settlement\",\"name\":\"settlement\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"mintData\",\"type\":\"bytes\"}],\"internalType\":\"struct IMarketNG.TokenPair[]\",\"name\":\"bundle\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IMarketNG.Detail\",\"name\":\"detail\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sigIntent\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sigDetail\",\"type\":\"bytes\"}],\"internalType\":\"struct CrossChainEndpoint.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketNG\",\"type\":\"address\"}],\"name\":\"setMarketNG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"name\":\"setMessageBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMessage(address,uint64,bytes,address)\":{\"params\":{\"_executor\":\"Address who called the MessageBus execution function\",\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_sender\":\"The address of the source app contract\",\"_srcChainId\":\"The source chain ID where the transfer is originated from\"}},\"executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)\":{\"params\":{\"amount\":\"The amount of the transfer\",\"dstToken\":\"the token used on destination chain\",\"message\":\"packed PurchaseRequest\"}},\"executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)\":{\"params\":{\"amount\":\"The amount of the transfer\",\"message\":\"packed PurchaseRequest\",\"token\":\"the token used on destination chain\"}},\"executeMessageWithTransferRefund(address,uint256,bytes,address)\":{\"params\":{\"amount\":\"The amount of the transfer\",\"message\":\"packed PurchaseRequest\",\"token\":\"the token used on source chain\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"purchase(uint64,address,address,address,uint256,uint32,((address,(address,uint256,uint256,uint8,bytes)[],address,uint256,uint256,bytes32,uint8),(bytes32,address,uint256,bytes32,uint256,uint8,address,address,uint256,uint256,(uint256[],uint256,uint256,uint256,address,address),(address,uint256,uint256,uint8,bytes)[],uint256),bytes,bytes))\":{\"params\":{\"amount\":\"The amount of the transfer\",\"dstChainId\":\"the destination chain to purchase NFT on\",\"dstCrossChainEndpoint\":\"the CrossChainEndpoint contract on the destination chain\",\"maxSlippage\":\"The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\",\"order\":\"input order, accquired from the Tofu backend server\",\"receiver\":\"the address on destination chain to receive target NFT\",\"srcToken\":\"The address of the transfer token.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessage(address,uint64,bytes,address)\":{\"notice\":\"Called by MessageBus (MessageBusReceiver)\"},\"executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)\":{\"notice\":\"called by executor on the dst chain to execute the NFT purchase\"},\"executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)\":{\"notice\":\"called only if handleMessageWithTransfer was reverted (etc, NFT sold out)\"},\"executeMessageWithTransferRefund(address,uint256,bytes,address)\":{\"notice\":\"called on source chain for handling of bridge failures (bad liquidity, bad slippage, etc...)\"},\"purchase(uint64,address,address,address,uint256,uint32,((address,(address,uint256,uint256,uint8,bytes)[],address,uint256,uint256,bytes32,uint8),(bytes32,address,uint256,bytes32,uint256,uint8,address,address,uint256,uint256,(uint256[],uint256,uint256,uint256,address,address),(address,uint256,uint256,uint8,bytes)[],uint256),bytes,bytes))\":{\"notice\":\"initiates a cross-chain call the the _chainId chain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrossChainEndpoint.sol\":\"CrossChainEndpoint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CrossChainEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"./interfaces/IMarketNG.sol\\\";\\nimport \\\"./lib/MessageReceiverApp.sol\\\";\\nimport \\\"./lib/MessageSenderLib.sol\\\";\\n\\ncontract CrossChainEndpoint is MessageReceiverApp {\\n    using SafeERC20 for IERC20;\\n\\n    uint8 public constant TOKEN_MINT = 0; // mint token (do anything)\\n    uint8 public constant TOKEN_721 = 1; // 721 token\\n    uint8 public constant TOKEN_1155 = 2; // 1155 token\\n\\n    address public marketNG;\\n\\n    uint64 nonce;\\n\\n    struct Order {\\n        IMarketNG.Intention intent;\\n        IMarketNG.Detail detail;\\n        bytes sigIntent;\\n        bytes sigDetail;\\n    }\\n\\n    struct PurchaseRequest {\\n        address receiver;\\n        address sender;\\n        Order order;\\n    }\\n\\n    event MarketNGUpdated(address oldMarketNG, address newMarketNG);\\n\\n    event PurchaseCompleted(uint256 id); // Detail.id\\n    event Refunded(uint64 chainId, uint256 id, address token, uint256 amount);\\n\\n    constructor(address _messageBus, address _marketNG) {\\n        messageBus = _messageBus;\\n        marketNG = _marketNG;\\n    }\\n\\n    /**\\n     * @notice initiates a cross-chain call the the _chainId chain\\n     * @param dstChainId the destination chain to purchase NFT on\\n     * @param dstCrossChainEndpoint the CrossChainEndpoint contract on the destination chain\\n     * @param receiver the address on destination chain to receive target NFT\\n     * @param srcToken The address of the transfer token.\\n     * @param amount The amount of the transfer\\n     * @param maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * @param order input order, accquired from the Tofu backend server\\n     */\\n    function purchase(\\n        uint64 dstChainId,\\n        address dstCrossChainEndpoint,\\n        address receiver,\\n        address srcToken,\\n        uint256 amount,\\n        uint32 maxSlippage,\\n        Order memory order\\n    ) external payable {\\n        nonce += 1;\\n        require(amount >= order.detail.price, \\\"invalid amount\\\");\\n        IERC20(srcToken).safeTransferFrom(msg.sender, address(this), amount);\\n        bytes memory message = abi.encode(PurchaseRequest(receiver, msg.sender, order));\\n        MessageSenderLib.sendMessageWithTransfer(\\n            dstCrossChainEndpoint,\\n            srcToken,\\n            amount,\\n            dstChainId,\\n            nonce,\\n            maxSlippage,\\n            message,\\n            MsgDataTypes.BridgeSendType.Liquidity,\\n            messageBus,\\n            msg.value\\n        );\\n    }\\n\\n    /**\\n     * @notice called by executor on the dst chain to execute the NFT purchase\\n     * @param dstToken the token used on destination chain\\n     * @param amount The amount of the transfer\\n     * @param message packed PurchaseRequest\\n     */\\n    function executeMessageWithTransfer(\\n        address, // _sender\\n        address dstToken,\\n        uint256 amount,\\n        uint64, //_srcChainId\\n        bytes memory message,\\n        address // executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        PurchaseRequest memory request = abi.decode((message), (PurchaseRequest));\\n        require(dstToken == address(request.order.detail.currency), \\\"invalid token type\\\");\\n        IERC20(request.order.detail.currency).safeApprove(marketNG, request.order.detail.price);\\n        IMarketNG(marketNG).run(\\n            request.order.intent,\\n            request.order.detail,\\n            request.order.sigIntent,\\n            request.order.sigDetail\\n        );\\n        // transfer NFT to receiver\\n        for (uint256 i = 0; i < request.order.intent.bundle.length; i++) {\\n            IMarketNG.TokenPair memory p = request.order.intent.bundle[i];\\n            if (p.kind == TOKEN_721) {\\n                IERC721(p.token).safeTransferFrom(address(this), request.receiver, p.tokenId);\\n            } else if (p.kind == TOKEN_1155) {\\n                IERC1155(p.token).safeTransferFrom(address(this), request.receiver, p.tokenId, p.amount, \\\"\\\");\\n            } else {\\n                revert(\\\"unsupported token\\\");\\n            }\\n        }\\n        // refund extra token\\n        if (amount > request.order.detail.price) {\\n            IERC20(request.order.detail.currency).safeTransfer(request.receiver, amount - request.order.detail.price);\\n        }\\n        emit PurchaseCompleted(request.order.detail.id);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    /**\\n     * @notice called only if handleMessageWithTransfer was reverted (etc, NFT sold out)\\n     * @param token the token used on destination chain\\n     * @param amount The amount of the transfer\\n     * @param message packed PurchaseRequest\\n     */\\n    function executeMessageWithTransferFallback(\\n        address, //_sender\\n        address token,\\n        uint256 amount,\\n        uint64, // _srcChainId\\n        bytes memory message,\\n        address // executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        PurchaseRequest memory request = abi.decode((message), (PurchaseRequest));\\n        IERC20(token).safeTransfer(request.receiver, amount);\\n        emit Refunded(uint64(block.chainid), request.order.detail.id, token, amount);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    /**\\n     * @notice called on source chain for handling of bridge failures (bad liquidity, bad slippage, etc...)\\n     * @param token the token used on source chain\\n     * @param amount The amount of the transfer\\n     * @param message packed PurchaseRequest\\n     */\\n    function executeMessageWithTransferRefund(\\n        address token,\\n        uint256 amount,\\n        bytes calldata message,\\n        address // executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        PurchaseRequest memory request = abi.decode((message), (PurchaseRequest));\\n        IERC20(token).safeTransfer(request.sender, amount);\\n        emit Refunded(uint64(block.chainid), request.order.detail.id, token, amount);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    function setMarketNG(address _marketNG) public onlyOwner {\\n        emit MarketNGUpdated(marketNG, _marketNG);\\n        marketNG = _marketNG;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) external pure returns (bytes4) {\\n        // only needed this for receiving NFTs.\\n        return 0x150b7a02;\\n    }\\n}\\n\",\"keccak256\":\"0x6a7256c220816bcb3842c0030d53f7d2ee6144274d07d7e2d5273c1ab49bb6c7\",\"license\":\"Unlicensed\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IBridge {\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function transfers(bytes32 transferId) external view returns (bool);\\n\\n    function withdraws(bytes32 withdrawId) external view returns (bool);\\n\\n    function withdraw(\\n        bytes calldata _wdmsg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x5f5ba7dedac51bcc2cb40e4a39caa18d46704b659a576b6be36ed68e657c8251\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IMarketNG.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMarketNG {\\n    struct Settlement {\\n        uint256[] coupons;\\n        uint256 feeRate;\\n        uint256 royaltyRate;\\n        uint256 buyerCashbackRate;\\n        address feeAddress;\\n        address royaltyAddress;\\n    }\\n\\n    struct TokenPair {\\n        address token; // token contract address\\n        uint256 tokenId; // token id (if applicable)\\n        uint256 amount; // token amount (if applicable)\\n        uint8 kind; // token kind (721/1151/mint)\\n        bytes mintData; // mint data (if applicable)\\n    }\\n\\n    struct Intention {\\n        address user;\\n        TokenPair[] bundle;\\n        IERC20 currency;\\n        uint256 price;\\n        uint256 deadline;\\n        bytes32 salt;\\n        uint8 kind;\\n    }\\n\\n    struct Detail {\\n        bytes32 intentionHash;\\n        address signer;\\n        uint256 txDeadline; // deadline for the transaction\\n        bytes32 salt;\\n        uint256 id; // inventory id\\n        uint8 opcode; // OP_*\\n        address caller;\\n        IERC20 currency;\\n        uint256 price;\\n        uint256 incentiveRate;\\n        Settlement settlement;\\n        TokenPair[] bundle;\\n        uint256 deadline; // deadline for buy offer\\n    }\\n\\n    function run(\\n        Intention calldata intent,\\n        Detail calldata detail,\\n        bytes calldata sigIntent,\\n        bytes calldata sigDetail\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xec47f05f1f9ec4d79bf4520077434a1364c65a6f62a10f6350055f3756fc30f3\",\"license\":\"Unlicensed\"},\"contracts/interfaces/IMessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../lib/MsgDataTypes.sol\\\";\\n\\ninterface IMessageBus {\\n    function liquidityBridge() external view returns (address);\\n\\n    function pegBridge() external view returns (address);\\n\\n    function pegBridgeV2() external view returns (address);\\n\\n    function pegVault() external view returns (address);\\n\\n    function pegVaultV2() external view returns (address);\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) external view returns (uint256);\\n\\n    /**\\n     * @notice Sends a message to a contract on another chain.\\n     * Sender needs to make sure the uniqueness of the message Id, which is computed as\\n     * hash(type.MessageOnly, sender, receiver, srcChainId, srcTxHash, dstChainId, message).\\n     * If messages with the same Id are sent, only one of them will succeed at dst chain..\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    // receiver is non-evm chain address\\n    function sendMessage(\\n        bytes calldata _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to a contract on another chain.\\n     * If messages with the same srcTransferId are sent, only one of them will succeed at dst chain..\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x76261efa6fc4a0281b12e57e7a19e5cacc366ba241a838c6e8b95671ea1a0a6a\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IMessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.16;\\n\\ninterface IMessageReceiverApp {\\n    enum ExecutionStatus {\\n        Fail, // execution failed, finalized\\n        Success, // execution succeeded, finalized\\n        Retry // execution rejected, can retry later\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Only called by MessageBus (MessageBusReceiver) if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    // execute message from non-evm chain with bytes for sender address,\\n    // otherwise same as above.\\n    function executeMessage(\\n        bytes calldata _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n}\\n\",\"keccak256\":\"0x981f3ed0bf095e8cf70c6948809ff697d7edf950eeae526dd936ddb6c7ce91e9\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IOriginalTokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVault {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8b4e940c16d960a4f8f0516951c52afbeb31c9b8bbbda7523650aadee2d72369\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IOriginalTokenVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVaultV2 {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc3d522d350cd42dc296fdea6ae75d7fe39244638161aadd1cbc70de13e34380d\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPeggedTokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridge {\\n    /**\\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        address _withdrawAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5adc3e5f1c8767c9f4580b499b16aba25f41934a2f945e9f0227b28d4b0405ae\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPeggedTokenBridgeV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridgeV2 {\\n    /**\\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\\n     * OriginalTokenVault, or mint at another remote chain\\n     * @param _token The pegged token address.\\n     * @param _amount The amount to burn.\\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\\n     * @param _toAccount The account to receive tokens on the remote chain\\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    // same with `burn` above, use openzeppelin ERC20Burnable interface\\n    function burnFrom(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xea5828630c131a1c7017360d4c1729c71bdeb5eaf366a30c9637c82795cea9d5\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/MessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"../interfaces/IMessageReceiverApp.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract MessageReceiverApp is IMessageReceiverApp, Ownable {\\n    modifier onlyMessageBus() {\\n        require(msg.sender == messageBus, \\\"caller is not message bus\\\");\\n        _;\\n    }\\n\\n    event MessageBusUpdated(address messageBus);\\n\\n    address public messageBus;\\n\\n    function setMessageBus(address _messageBus) public onlyOwner {\\n        messageBus = _messageBus;\\n        emit MessageBusUpdated(messageBus);\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Only called by MessageBus (MessageBusReceiver) if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    // execute message from non-evm chain with bytes for sender address,\\n    // otherwise same as above.\\n    function executeMessage(\\n        bytes calldata _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n}\\n\",\"keccak256\":\"0x86b56c9f1092142793a77ea4c3d357ab11a07e3e820dad1635af5e74218c991c\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/MessageSenderLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IBridge.sol\\\";\\nimport \\\"../interfaces/IOriginalTokenVault.sol\\\";\\nimport \\\"../interfaces/IOriginalTokenVaultV2.sol\\\";\\nimport \\\"../interfaces/IPeggedTokenBridge.sol\\\";\\nimport \\\"../interfaces/IPeggedTokenBridgeV2.sol\\\";\\nimport \\\"../interfaces/IMessageBus.sol\\\";\\nimport \\\"./MsgDataTypes.sol\\\";\\n\\nlibrary MessageSenderLib {\\n    using SafeERC20 for IERC20;\\n\\n    // ============== Internal library functions called by apps ==============\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal {\\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\\n    }\\n\\n    // Send message to non-evm chain with bytes for receiver address,\\n    // otherwise same as above.\\n    function sendMessage(\\n        bytes calldata _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal {\\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded. Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        (bytes32 transferId, address bridge) = sendTokenTransfer(\\n            _receiver,\\n            _token,\\n            _amount,\\n            _dstChainId,\\n            _nonce,\\n            _maxSlippage,\\n            _bridgeSendType,\\n            _messageBus\\n        );\\n        if (_message.length > 0) {\\n            IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n                _receiver,\\n                _dstChainId,\\n                bridge,\\n                transferId,\\n                _message\\n            );\\n        }\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a token transfer via a bridge.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     */\\n    function sendTokenTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus\\n    ) internal returns (bytes32 transferId, address bridge) {\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\\n            bridge = IMessageBus(_messageBus).liquidityBridge();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IBridge(bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n            transferId = computeLiqBridgeTransferId(_receiver, _token, _amount, _dstChainId, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n            bridge = IMessageBus(_messageBus).pegVault();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IOriginalTokenVault(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n            transferId = computePegV1DepositId(_receiver, _token, _amount, _dstChainId, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n            bridge = IMessageBus(_messageBus).pegBridge();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IPeggedTokenBridge(bridge).burn(_token, _amount, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n            transferId = computePegV1BurnId(_receiver, _token, _amount, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\\n            bridge = IMessageBus(_messageBus).pegVaultV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IOriginalTokenVaultV2(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn) {\\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IPeggedTokenBridgeV2(bridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom) {\\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IPeggedTokenBridgeV2(bridge).burnFrom(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n    }\\n\\n    function computeLiqBridgeTransferId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\\n            );\\n    }\\n\\n    function computePegV1DepositId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\\n            );\\n    }\\n\\n    function computePegV1BurnId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid)));\\n    }\\n}\\n\",\"keccak256\":\"0x83faaba75b95e76bc0e5b141955caf16335303790c9a106439790ff49132bde9\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/MsgDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.16;\\n\\nlibrary MsgDataTypes {\\n    // bridge operation type at the sender side (src chain)\\n    enum BridgeSendType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn,\\n        PegV2Deposit,\\n        PegV2Burn,\\n        PegV2BurnFrom\\n    }\\n\\n    // bridge operation type at the receiver side (dst chain)\\n    enum TransferType {\\n        Null,\\n        LqRelay, // relay through liquidity bridge\\n        LqWithdraw, // withdraw from liquidity bridge\\n        PegMint, // mint through pegged token bridge\\n        PegWithdraw, // withdraw from original token vault\\n        PegV2Mint, // mint through pegged token bridge v2\\n        PegV2Withdraw // withdraw from original token vault v2\\n    }\\n\\n    enum MsgType {\\n        MessageWithTransfer,\\n        MessageOnly\\n    }\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail,\\n        Fallback,\\n        Pending // transient state within a transaction\\n    }\\n\\n    struct TransferInfo {\\n        TransferType t;\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 wdseq; // only needed for LqWithdraw (refund)\\n        uint64 srcChainId;\\n        bytes32 refId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct RouteInfo {\\n        address sender;\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct MsgWithTransferExecutionParams {\\n        bytes message;\\n        TransferInfo transfer;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n\\n    struct BridgeTransferParams {\\n        bytes request;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n}\\n\",\"keccak256\":\"0xcecf77dbb8ff46872479058e387ad0076db64492c8df476940729d3264b7c3c5\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003154380380620031548339810160408190526200003491620000de565b6200003f3362000071565b600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905562000116565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000d957600080fd5b919050565b60008060408385031215620000f257600080fd5b620000fd83620000c1565b91506200010d60208401620000c1565b90509250929050565b61302e80620001266000396000f3fe60806040526004361061010e5760003560e01c80637cd2bffc116100a5578063a1a227fa11610074578063c477be2011610059578063c477be20146102eb578063f0d250ba14610300578063f2fde38b1461031557600080fd5b8063a1a227fa146102b8578063b9b3c43d146102d857600080fd5b80637cd2bffc1461024d578063853ca41a146102605780638da5cb5b146102875780639c649fdf146102a557600080fd5b8063547cad12116100e1578063547cad12146101cd5780635ab7afc6146101ed5780635f4a9e3214610200578063715018a61461023857600080fd5b8063063ce4e5146101135780630bcb49821461013c57806314f38ce21461014f578063150b7a0214610171575b600080fd5b610126610121366004611c06565b610335565b6040516101339190611cb2565b60405180910390f35b61012661014a366004611cda565b6103a1565b34801561015b57600080fd5b5061016f61016a366004611d4e565b6104a0565b005b34801561017d57600080fd5b5061019c61018c366004611f09565b630a85bd0160e11b949350505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610133565b3480156101d957600080fd5b5061016f6101e8366004611d4e565b61051e565b6101266101fb366004611f75565b610587565b34801561020c57600080fd5b50600254610220906001600160a01b031681565b6040516001600160a01b039091168152602001610133565b34801561024457600080fd5b5061016f61068b565b61012661025b366004611f75565b61069f565b34801561026c57600080fd5b50610275600081565b60405160ff9091168152602001610133565b34801561029357600080fd5b506000546001600160a01b0316610220565b6101266102b3366004611ff7565b610a4a565b3480156102c457600080fd5b50600154610220906001600160a01b031681565b61016f6102e63660046124b2565b610aa7565b3480156102f757600080fd5b50610275600181565b34801561030c57600080fd5b50610275600281565b34801561032157600080fd5b5061016f610330366004611d4e565b610bf9565b6001546000906001600160a01b031633146103975760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d657373616765206275730000000000000060448201526064015b60405180910390fd5b9695505050505050565b6001546000906001600160a01b031633146103fe5760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604482015260640161038e565b600061040c8486018661255d565b6020810151909150610429906001600160a01b0389169088610c89565b604080820151602090810151608090810151835167ffffffffffffffff46168152928301526001600160a01b038a1692820192909252606081018890527fd503d3d5e9b37eecdfdfdd869a1654613939b186d6cc324e76a9240d31bd55d3910160405180910390a160019150505b95945050505050565b6104a8610d1e565b600254604080516001600160a01b03928316815291831660208301527f2f38d43651e512ae7b970e97de7d2171700da259f0e3f9890d88883171b41274910160405180910390a16002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610526610d1e565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e9060200160405180910390a150565b6001546000906001600160a01b031633146105e45760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604482015260640161038e565b6000838060200190518101906105fa91906129cd565b8051909150610614906001600160a01b0389169088610c89565b604080820151602090810151608090810151835167ffffffffffffffff46168152928301526001600160a01b038a1692820192909252606081018890527fd503d3d5e9b37eecdfdfdd869a1654613939b186d6cc324e76a9240d31bd55d391015b60405180910390a1506001979650505050505050565b610693610d1e565b61069d6000610d78565b565b6001546000906001600160a01b031633146106fc5760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604482015260640161038e565b60008380602001905181019061071291906129cd565b905080604001516020015160e001516001600160a01b0316876001600160a01b0316146107815760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420746f6b656e20747970650000000000000000000000000000604482015260640161038e565b60025460408201516020015161010081015160e0909101516107b1926001600160a01b0391821692911690610dd5565b6002546040808301518051602082015182840151606090930151935163ba84775960e01b81526001600160a01b039095169463ba847759946107f69491600401612daa565b600060405180830381600087803b15801561081057600080fd5b505af1158015610824573d6000803e3d6000fd5b5050505060005b60408201515160200151518110156109bb57600082604001516000015160200151828151811061085d5761085d612df7565b60200260200101519050600160ff16816060015160ff16036108f157805183516020830151604051632142170760e11b81523060048201526001600160a01b03928316602482015260448101919091529116906342842e0e906064015b600060405180830381600087803b1580156108d457600080fd5b505af11580156108e8573d6000803e3d6000fd5b505050506109a8565b600260ff16816060015160ff1603610960578051835160208301516040808501519051637921219560e11b81523060048201526001600160a01b0393841660248201526044810192909252606482015260a06084820152600060a482015291169063f242432a9060c4016108ba565b60405162461bcd60e51b815260206004820152601160248201527f756e737570706f7274656420746f6b656e000000000000000000000000000000604482015260640161038e565b50806109b381612e23565b91505061082b565b508060400151602001516101000151861115610a0d5780516040820151602001516101000151610a0d91906109f09089612e3c565b60408401516020015160e001516001600160a01b03169190610c89565b7f5d2e146c95f4ec58ed7e1dc5cc4f32ff5ffdd304fdd34cfd84a930d39f1f5e728160400151602001516080015160405161067591815260200190565b6001546000906001600160a01b031633146104975760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604482015260640161038e565b6001600260148282829054906101000a900467ffffffffffffffff16610acd9190612e55565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080602001516101000151831015610b4c5760405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420616d6f756e74000000000000000000000000000000000000604482015260640161038e565b610b616001600160a01b038516333086610ef1565b60006040518060600160405280876001600160a01b03168152602001336001600160a01b0316815260200183815250604051602001610ba09190612e7d565b6040516020818303038152906040529050610bee8786868b600260149054906101000a900467ffffffffffffffff16888760018060009054906101000a90046001600160a01b031634610f2f565b505050505050505050565b610c01610d1e565b6001600160a01b038116610c7d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161038e565b610c8681610d78565b50565b6040516001600160a01b038316602482015260448101829052610d1990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610fc8565b505050565b6000546001600160a01b0316331461069d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038e565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b801580610e4f5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4d9190612f1c565b155b610ec15760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161038e565b6040516001600160a01b038316602482015260448101829052610d1990849063095ea7b360e01b90606401610cb5565b6040516001600160a01b0380851660248301528316604482015260648101829052610f299085906323b872dd60e01b90608401610cb5565b50505050565b6000806000610f448d8d8d8d8d8d8c8c6110ad565b8851919350915015610fb857846001600160a01b0316634289fbb3858f8d85878d6040518763ffffffff1660e01b8152600401610f85959493929190612f35565b6000604051808303818588803b158015610f9e57600080fd5b505af1158015610fb2573d6000803e3d6000fd5b50505050505b509b9a5050505050505050505050565b600061101d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661183e9092919063ffffffff16565b805190915015610d19578080602001905181019061103b9190612f77565b610d195760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161038e565b60008060018460068111156110c4576110c4611c9c565b036111e357826001600160a01b03166382980dc46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112b9190612f99565b90506111416001600160a01b038a16828a611857565b60405163a5977fbb60e01b81526001600160a01b038b811660048301528a81166024830152604482018a905267ffffffffffffffff808a1660648401528816608483015263ffffffff871660a483015282169063a5977fbb9060c401600060405180830381600087803b1580156111b757600080fd5b505af11580156111cb573d6000803e3d6000fd5b505050506111dc8a8a8a8a8a611909565b9150611831565b60028460068111156111f7576111f7611c9c565b0361130357826001600160a01b031663d8257d176040518163ffffffff1660e01b8152600401602060405180830381865afa15801561123a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125e9190612f99565b90506112746001600160a01b038a16828a611857565b6040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015282169063234636249060a401600060405180830381600087803b1580156112de57600080fd5b505af11580156112f2573d6000803e3d6000fd5b505050506111dc8a8a8a8a8a611991565b600384600681111561131757611317611c9c565b0361149e57826001600160a01b031663dfa2dbaf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561135a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137e9190612f99565b90506113946001600160a01b038a16828a611857565b604051636f3c863f60e11b81526001600160a01b038a81166004830152602482018a90528b8116604483015267ffffffffffffffff8816606483015282169063de790c7e90608401600060405180830381600087803b1580156113f657600080fd5b505af115801561140a573d6000803e3d6000fd5b50611424925050506001600160a01b038a16826000610dd5565b604080516bffffffffffffffffffffffff1930606090811b82166020808501919091528d821b83166034850152604884018d9052908e901b90911660688301526001600160c01b031960c08a811b8216607c85015246901b1660848301528251808303606c018152608c90920190925280519101206111dc565b60048460068111156114b2576114b2611c9c565b036115c257826001600160a01b031663c66a9c5a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115199190612f99565b905061152f6001600160a01b038a16828a611857565b6040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015282169063234636249060a4016020604051808303816000875af115801561159e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dc9190612f1c565b60058460068111156115d6576115d6611c9c565b0361170357826001600160a01b03166395b12c276040518163ffffffff1660e01b8152600401602060405180830381865afa158015611619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163d9190612f99565b90506116536001600160a01b038a16828a611857565b60405163a002930160e01b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015282169063a00293019060a4015b6020604051808303816000875af11580156116c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e79190612f1c565b91506116fe6001600160a01b038a16826000610dd5565b611831565b600684600681111561171757611717611c9c565b036117e957826001600160a01b03166395b12c276040518163ffffffff1660e01b8152600401602060405180830381865afa15801561175a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177e9190612f99565b90506117946001600160a01b038a16828a611857565b604051639e422c3360e01b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c8216606484015288166084830152821690639e422c339060a4016116a4565b60405162461bcd60e51b815260206004820152601960248201527f6272696467652074797065206e6f7420737570706f7274656400000000000000604482015260640161038e565b9850989650505050505050565b606061184d84846000856119ff565b90505b9392505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156118a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cc9190612f1c565b6118d69190612fb6565b6040516001600160a01b038516602482015260448101829052909150610f2990859063095ea7b360e01b90606401610cb5565b6040516bffffffffffffffffffffffff1930606090811b8216602084015287811b8216603484015286901b166048820152605c81018490526001600160c01b031960c084811b8216607c84015283811b8216608484015246901b16608c8201526000906094015b60405160208183030381529060405280519060200120905095945050505050565b6040516bffffffffffffffffffffffff1930606090811b8216602084015286811b82166034840152604883018690526001600160c01b031960c086811b821660688601529189901b909216607084015283811b8216608484015246901b16608c820152600090609401611970565b606082471015611a775760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161038e565b6001600160a01b0385163b611ace5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161038e565b600080866001600160a01b03168587604051611aea9190612fc9565b60006040518083038185875af1925050503d8060008114611b27576040519150601f19603f3d011682016040523d82523d6000602084013e611b2c565b606091505b5091509150611b3c828286611b47565b979650505050505050565b60608315611b56575081611850565b825115611b665782518084602001fd5b8160405162461bcd60e51b815260040161038e9190612fe5565b60008083601f840112611b9257600080fd5b50813567ffffffffffffffff811115611baa57600080fd5b602083019150836020828501011115611bc257600080fd5b9250929050565b803567ffffffffffffffff81168114611be157600080fd5b919050565b6001600160a01b0381168114610c8657600080fd5b8035611be181611be6565b60008060008060008060808789031215611c1f57600080fd5b863567ffffffffffffffff80821115611c3757600080fd5b611c438a838b01611b80565b9098509650869150611c5760208a01611bc9565b95506040890135915080821115611c6d57600080fd5b50611c7a89828a01611b80565b9094509250506060870135611c8e81611be6565b809150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611cd457634e487b7160e01b600052602160045260246000fd5b91905290565b600080600080600060808688031215611cf257600080fd5b8535611cfd81611be6565b945060208601359350604086013567ffffffffffffffff811115611d2057600080fd5b611d2c88828901611b80565b9094509250506060860135611d4081611be6565b809150509295509295909350565b600060208284031215611d6057600080fd5b813561185081611be6565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715611da457611da4611d6b565b60405290565b60405160e0810167ffffffffffffffff81118282101715611da457611da4611d6b565b60405160c0810167ffffffffffffffff81118282101715611da457611da4611d6b565b6040516101a0810167ffffffffffffffff81118282101715611da457611da4611d6b565b6040516080810167ffffffffffffffff81118282101715611da457611da4611d6b565b6040516060810167ffffffffffffffff81118282101715611da457611da4611d6b565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e8357611e83611d6b565b604052919050565b600067ffffffffffffffff821115611ea557611ea5611d6b565b50601f01601f191660200190565b600082601f830112611ec457600080fd5b8135611ed7611ed282611e8b565b611e5a565b818152846020838601011115611eec57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611f1f57600080fd5b8435611f2a81611be6565b93506020850135611f3a81611be6565b925060408501359150606085013567ffffffffffffffff811115611f5d57600080fd5b611f6987828801611eb3565b91505092959194509250565b60008060008060008060c08789031215611f8e57600080fd5b8635611f9981611be6565b95506020870135611fa981611be6565b945060408701359350611fbe60608801611bc9565b9250608087013567ffffffffffffffff811115611fda57600080fd5b611fe689828a01611eb3565b92505060a0870135611c8e81611be6565b60008060008060006080868803121561200f57600080fd5b853561201a81611be6565b945061202860208701611bc9565b9350604086013567ffffffffffffffff811115611d2057600080fd5b600067ffffffffffffffff82111561205e5761205e611d6b565b5060051b60200190565b60ff81168114610c8657600080fd5b8035611be181612068565b600082601f83011261209357600080fd5b813560206120a3611ed283612044565b82815260059290921b840181019181810190868411156120c257600080fd5b8286015b8481101561217857803567ffffffffffffffff808211156120e75760008081fd5b9088019060a0828b03601f19018113156121015760008081fd5b612109611d81565b8784013561211681611be6565b808252506040808501358983015260608086013582840152608091508186013561213f81612068565b908301529184013591838311156121565760008081fd5b6121648d8a85880101611eb3565b9082015286525050509183019183016120c6565b509695505050505050565b600060e0828403121561219557600080fd5b61219d611daa565b90506121a882611bfb565b8152602082013567ffffffffffffffff8111156121c457600080fd5b6121d084828501612082565b6020830152506121e260408301611bfb565b6040820152606082013560608201526080820135608082015260a082013560a082015261221160c08301612077565b60c082015292915050565b600060c0828403121561222e57600080fd5b612236611dcd565b9050813567ffffffffffffffff81111561224f57600080fd5b8201601f8101841361226057600080fd5b80356020612270611ed283612044565b82815260059290921b8301810191818101908784111561228f57600080fd5b938201935b838510156122ad57843582529382019390820190612294565b8552508481013590840152505060408083013590820152606080830135908201526122da60808301611bfb565b60808201526122eb60a08301611bfb565b60a082015292915050565b60006101a0828403121561230957600080fd5b612311611df0565b90508135815261232360208301611bfb565b602082015260408201356040820152606082013560608201526080820135608082015261235260a08301612077565b60a082015261236360c08301611bfb565b60c082015261237460e08301611bfb565b60e0820152610100828101359082015261012080830135908201526101408083013567ffffffffffffffff808211156123ac57600080fd5b6123b88683870161221c565b838501526101609250828501359150808211156123d457600080fd5b506123e185828601612082565b82840152505061018080830135818301525092915050565b60006080828403121561240b57600080fd5b612413611e14565b9050813567ffffffffffffffff8082111561242d57600080fd5b61243985838601612183565b8352602084013591508082111561244f57600080fd5b61245b858386016122f6565b6020840152604084013591508082111561247457600080fd5b61248085838601611eb3565b6040840152606084013591508082111561249957600080fd5b506124a684828501611eb3565b60608301525092915050565b600080600080600080600060e0888a0312156124cd57600080fd5b6124d688611bc9565b965060208801356124e681611be6565b955060408801356124f681611be6565b9450606088013561250681611be6565b93506080880135925060a088013563ffffffff8116811461252657600080fd5b915060c088013567ffffffffffffffff81111561254257600080fd5b61254e8a828b016123f9565b91505092959891949750929550565b60006020828403121561256f57600080fd5b813567ffffffffffffffff8082111561258757600080fd5b908301906060828603121561259b57600080fd5b6125a3611e37565b82356125ae81611be6565b815260208301356125be81611be6565b60208201526040830135828111156125d557600080fd5b6125e1878286016123f9565b60408301525095945050505050565b8051611be181611be6565b8051611be181612068565b60005b83811015612621578181015183820152602001612609565b50506000910152565b600082601f83011261263b57600080fd5b8151612649611ed282611e8b565b81815284602083860101111561265e57600080fd5b61266f826020830160208701612606565b949350505050565b600082601f83011261268857600080fd5b81516020612698611ed283612044565b82815260059290921b840181019181810190868411156126b757600080fd5b8286015b8481101561217857805167ffffffffffffffff808211156126dc5760008081fd5b9088019060a0828b03601f19018113156126f65760008081fd5b6126fe611d81565b8784015161270b81611be6565b808252506040808501518983015260608086015182840152608091508186015161273481612068565b9083015291840151918383111561274b5760008081fd5b6127598d8a8588010161262a565b9082015286525050509183019183016126bb565b600060e0828403121561277f57600080fd5b612787611daa565b9050612792826125f0565b8152602082015167ffffffffffffffff8111156127ae57600080fd5b6127ba84828501612677565b6020830152506127cc604083016125f0565b6040820152606082015160608201526080820151608082015260a082015160a082015261221160c083016125fb565b600060c0828403121561280d57600080fd5b612815611dcd565b9050815167ffffffffffffffff81111561282e57600080fd5b8201601f8101841361283f57600080fd5b8051602061284f611ed283612044565b82815260059290921b8301810191818101908784111561286e57600080fd5b938201935b8385101561288c57845182529382019390820190612873565b8552508481015190840152505060408083015190820152606080830151908201526128b9608083016125f0565b60808201526122eb60a083016125f0565b60006101a082840312156128dd57600080fd5b6128e5611df0565b9050815181526128f7602083016125f0565b602082015260408201516040820152606082015160608201526080820151608082015261292660a083016125fb565b60a082015261293760c083016125f0565b60c082015261294860e083016125f0565b60e0820152610100828101519082015261012080830151908201526101408083015167ffffffffffffffff8082111561298057600080fd5b61298c868387016127fb565b838501526101609250828501519150808211156129a857600080fd5b506129b585828601612677565b82840152505061018080830151818301525092915050565b6000602082840312156129df57600080fd5b815167ffffffffffffffff808211156129f757600080fd5b9083019060608286031215612a0b57600080fd5b612a13611e37565b8251612a1e81611be6565b81526020830151612a2e81611be6565b6020820152604083015182811115612a4557600080fd5b929092019160808387031215612a5a57600080fd5b612a62611e14565b835183811115612a7157600080fd5b612a7d8882870161276d565b825250602084015183811115612a9257600080fd5b612a9e888287016128ca565b602083015250604084015183811115612ab657600080fd5b612ac28882870161262a565b604083015250606084015183811115612ada57600080fd5b612ae68882870161262a565b606083015250604082015295945050505050565b60008151808452612b12816020860160208601612606565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612bae578284038952815180516001600160a01b0316855285810151868601526040808201519086015260608082015160ff169086015260809081015160a091860182905290612b9a81870183612afa565b9a87019a9550505090840190600101612b44565b5091979650505050505050565b60006001600160a01b03808351168452602083015160e06020860152612be460e0860182612b26565b9050816040850151166040860152606084015160608601526080840151608086015260a084015160a086015260ff60c08501511660c0860152809250505092915050565b805160c080845281519084018190526000916020919082019060e0860190845b81811015612c6457835183529284019291840191600101612c48565b50508285015183870152604085015160408701526060850151606087015260808501519250612c9e60808701846001600160a01b03169052565b60a0850151925061049760a08701846001600160a01b03169052565b60006101a0825184526020830151612cdd60208601826001600160a01b03169052565b5060408301516040850152606083015160608501526080830151608085015260a0830151612d1060a086018260ff169052565b5060c0830151612d2b60c08601826001600160a01b03169052565b5060e0830151612d4660e08601826001600160a01b03169052565b506101008381015190850152610120808401519085015261014080840151818601839052612d7683870182612c28565b925050506101608084015185830382870152612d928382612b26565b61018095860151969095019590955250919392505050565b608081526000612dbd6080830187612bbb565b8281036020840152612dcf8187612cba565b90508281036040840152612de38186612afa565b90508281036060840152611b3c8185612afa565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612e3557612e35612e0d565b5060010190565b81810381811115612e4f57612e4f612e0d565b92915050565b67ffffffffffffffff818116838216019080821115612e7657612e76612e0d565b5092915050565b6020815260006001600160a01b038084511660208401528060208501511660408401525060408301516060808401528051608080850152612ec2610100850182612bbb565b90506020820151607f19808684030160a0870152612ee08383612cba565b925060408401519150808684030160c0870152612efd8383612afa565b925060608401519350808684030160e087015250506104978183612afa565b600060208284031215612f2e57600080fd5b5051919050565b60006001600160a01b03808816835267ffffffffffffffff8716602084015280861660408401525083606083015260a06080830152611b3c60a0830184612afa565b600060208284031215612f8957600080fd5b8151801515811461185057600080fd5b600060208284031215612fab57600080fd5b815161185081611be6565b80820180821115612e4f57612e4f612e0d565b60008251612fdb818460208701612606565b9190910192915050565b6020815260006118506020830184612afa56fea26469706673582212207b2631804acaffdde4976c65cd5fc0d9488c87d2099bc53940dee9e38e4b67d164736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361061010e5760003560e01c80637cd2bffc116100a5578063a1a227fa11610074578063c477be2011610059578063c477be20146102eb578063f0d250ba14610300578063f2fde38b1461031557600080fd5b8063a1a227fa146102b8578063b9b3c43d146102d857600080fd5b80637cd2bffc1461024d578063853ca41a146102605780638da5cb5b146102875780639c649fdf146102a557600080fd5b8063547cad12116100e1578063547cad12146101cd5780635ab7afc6146101ed5780635f4a9e3214610200578063715018a61461023857600080fd5b8063063ce4e5146101135780630bcb49821461013c57806314f38ce21461014f578063150b7a0214610171575b600080fd5b610126610121366004611c06565b610335565b6040516101339190611cb2565b60405180910390f35b61012661014a366004611cda565b6103a1565b34801561015b57600080fd5b5061016f61016a366004611d4e565b6104a0565b005b34801561017d57600080fd5b5061019c61018c366004611f09565b630a85bd0160e11b949350505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610133565b3480156101d957600080fd5b5061016f6101e8366004611d4e565b61051e565b6101266101fb366004611f75565b610587565b34801561020c57600080fd5b50600254610220906001600160a01b031681565b6040516001600160a01b039091168152602001610133565b34801561024457600080fd5b5061016f61068b565b61012661025b366004611f75565b61069f565b34801561026c57600080fd5b50610275600081565b60405160ff9091168152602001610133565b34801561029357600080fd5b506000546001600160a01b0316610220565b6101266102b3366004611ff7565b610a4a565b3480156102c457600080fd5b50600154610220906001600160a01b031681565b61016f6102e63660046124b2565b610aa7565b3480156102f757600080fd5b50610275600181565b34801561030c57600080fd5b50610275600281565b34801561032157600080fd5b5061016f610330366004611d4e565b610bf9565b6001546000906001600160a01b031633146103975760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d657373616765206275730000000000000060448201526064015b60405180910390fd5b9695505050505050565b6001546000906001600160a01b031633146103fe5760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604482015260640161038e565b600061040c8486018661255d565b6020810151909150610429906001600160a01b0389169088610c89565b604080820151602090810151608090810151835167ffffffffffffffff46168152928301526001600160a01b038a1692820192909252606081018890527fd503d3d5e9b37eecdfdfdd869a1654613939b186d6cc324e76a9240d31bd55d3910160405180910390a160019150505b95945050505050565b6104a8610d1e565b600254604080516001600160a01b03928316815291831660208301527f2f38d43651e512ae7b970e97de7d2171700da259f0e3f9890d88883171b41274910160405180910390a16002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610526610d1e565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e9060200160405180910390a150565b6001546000906001600160a01b031633146105e45760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604482015260640161038e565b6000838060200190518101906105fa91906129cd565b8051909150610614906001600160a01b0389169088610c89565b604080820151602090810151608090810151835167ffffffffffffffff46168152928301526001600160a01b038a1692820192909252606081018890527fd503d3d5e9b37eecdfdfdd869a1654613939b186d6cc324e76a9240d31bd55d391015b60405180910390a1506001979650505050505050565b610693610d1e565b61069d6000610d78565b565b6001546000906001600160a01b031633146106fc5760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604482015260640161038e565b60008380602001905181019061071291906129cd565b905080604001516020015160e001516001600160a01b0316876001600160a01b0316146107815760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420746f6b656e20747970650000000000000000000000000000604482015260640161038e565b60025460408201516020015161010081015160e0909101516107b1926001600160a01b0391821692911690610dd5565b6002546040808301518051602082015182840151606090930151935163ba84775960e01b81526001600160a01b039095169463ba847759946107f69491600401612daa565b600060405180830381600087803b15801561081057600080fd5b505af1158015610824573d6000803e3d6000fd5b5050505060005b60408201515160200151518110156109bb57600082604001516000015160200151828151811061085d5761085d612df7565b60200260200101519050600160ff16816060015160ff16036108f157805183516020830151604051632142170760e11b81523060048201526001600160a01b03928316602482015260448101919091529116906342842e0e906064015b600060405180830381600087803b1580156108d457600080fd5b505af11580156108e8573d6000803e3d6000fd5b505050506109a8565b600260ff16816060015160ff1603610960578051835160208301516040808501519051637921219560e11b81523060048201526001600160a01b0393841660248201526044810192909252606482015260a06084820152600060a482015291169063f242432a9060c4016108ba565b60405162461bcd60e51b815260206004820152601160248201527f756e737570706f7274656420746f6b656e000000000000000000000000000000604482015260640161038e565b50806109b381612e23565b91505061082b565b508060400151602001516101000151861115610a0d5780516040820151602001516101000151610a0d91906109f09089612e3c565b60408401516020015160e001516001600160a01b03169190610c89565b7f5d2e146c95f4ec58ed7e1dc5cc4f32ff5ffdd304fdd34cfd84a930d39f1f5e728160400151602001516080015160405161067591815260200190565b6001546000906001600160a01b031633146104975760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604482015260640161038e565b6001600260148282829054906101000a900467ffffffffffffffff16610acd9190612e55565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080602001516101000151831015610b4c5760405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420616d6f756e74000000000000000000000000000000000000604482015260640161038e565b610b616001600160a01b038516333086610ef1565b60006040518060600160405280876001600160a01b03168152602001336001600160a01b0316815260200183815250604051602001610ba09190612e7d565b6040516020818303038152906040529050610bee8786868b600260149054906101000a900467ffffffffffffffff16888760018060009054906101000a90046001600160a01b031634610f2f565b505050505050505050565b610c01610d1e565b6001600160a01b038116610c7d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161038e565b610c8681610d78565b50565b6040516001600160a01b038316602482015260448101829052610d1990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610fc8565b505050565b6000546001600160a01b0316331461069d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038e565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b801580610e4f5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4d9190612f1c565b155b610ec15760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161038e565b6040516001600160a01b038316602482015260448101829052610d1990849063095ea7b360e01b90606401610cb5565b6040516001600160a01b0380851660248301528316604482015260648101829052610f299085906323b872dd60e01b90608401610cb5565b50505050565b6000806000610f448d8d8d8d8d8d8c8c6110ad565b8851919350915015610fb857846001600160a01b0316634289fbb3858f8d85878d6040518763ffffffff1660e01b8152600401610f85959493929190612f35565b6000604051808303818588803b158015610f9e57600080fd5b505af1158015610fb2573d6000803e3d6000fd5b50505050505b509b9a5050505050505050505050565b600061101d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661183e9092919063ffffffff16565b805190915015610d19578080602001905181019061103b9190612f77565b610d195760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161038e565b60008060018460068111156110c4576110c4611c9c565b036111e357826001600160a01b03166382980dc46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112b9190612f99565b90506111416001600160a01b038a16828a611857565b60405163a5977fbb60e01b81526001600160a01b038b811660048301528a81166024830152604482018a905267ffffffffffffffff808a1660648401528816608483015263ffffffff871660a483015282169063a5977fbb9060c401600060405180830381600087803b1580156111b757600080fd5b505af11580156111cb573d6000803e3d6000fd5b505050506111dc8a8a8a8a8a611909565b9150611831565b60028460068111156111f7576111f7611c9c565b0361130357826001600160a01b031663d8257d176040518163ffffffff1660e01b8152600401602060405180830381865afa15801561123a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125e9190612f99565b90506112746001600160a01b038a16828a611857565b6040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015282169063234636249060a401600060405180830381600087803b1580156112de57600080fd5b505af11580156112f2573d6000803e3d6000fd5b505050506111dc8a8a8a8a8a611991565b600384600681111561131757611317611c9c565b0361149e57826001600160a01b031663dfa2dbaf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561135a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137e9190612f99565b90506113946001600160a01b038a16828a611857565b604051636f3c863f60e11b81526001600160a01b038a81166004830152602482018a90528b8116604483015267ffffffffffffffff8816606483015282169063de790c7e90608401600060405180830381600087803b1580156113f657600080fd5b505af115801561140a573d6000803e3d6000fd5b50611424925050506001600160a01b038a16826000610dd5565b604080516bffffffffffffffffffffffff1930606090811b82166020808501919091528d821b83166034850152604884018d9052908e901b90911660688301526001600160c01b031960c08a811b8216607c85015246901b1660848301528251808303606c018152608c90920190925280519101206111dc565b60048460068111156114b2576114b2611c9c565b036115c257826001600160a01b031663c66a9c5a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115199190612f99565b905061152f6001600160a01b038a16828a611857565b6040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015282169063234636249060a4016020604051808303816000875af115801561159e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dc9190612f1c565b60058460068111156115d6576115d6611c9c565b0361170357826001600160a01b03166395b12c276040518163ffffffff1660e01b8152600401602060405180830381865afa158015611619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163d9190612f99565b90506116536001600160a01b038a16828a611857565b60405163a002930160e01b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015282169063a00293019060a4015b6020604051808303816000875af11580156116c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e79190612f1c565b91506116fe6001600160a01b038a16826000610dd5565b611831565b600684600681111561171757611717611c9c565b036117e957826001600160a01b03166395b12c276040518163ffffffff1660e01b8152600401602060405180830381865afa15801561175a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177e9190612f99565b90506117946001600160a01b038a16828a611857565b604051639e422c3360e01b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c8216606484015288166084830152821690639e422c339060a4016116a4565b60405162461bcd60e51b815260206004820152601960248201527f6272696467652074797065206e6f7420737570706f7274656400000000000000604482015260640161038e565b9850989650505050505050565b606061184d84846000856119ff565b90505b9392505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156118a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cc9190612f1c565b6118d69190612fb6565b6040516001600160a01b038516602482015260448101829052909150610f2990859063095ea7b360e01b90606401610cb5565b6040516bffffffffffffffffffffffff1930606090811b8216602084015287811b8216603484015286901b166048820152605c81018490526001600160c01b031960c084811b8216607c84015283811b8216608484015246901b16608c8201526000906094015b60405160208183030381529060405280519060200120905095945050505050565b6040516bffffffffffffffffffffffff1930606090811b8216602084015286811b82166034840152604883018690526001600160c01b031960c086811b821660688601529189901b909216607084015283811b8216608484015246901b16608c820152600090609401611970565b606082471015611a775760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161038e565b6001600160a01b0385163b611ace5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161038e565b600080866001600160a01b03168587604051611aea9190612fc9565b60006040518083038185875af1925050503d8060008114611b27576040519150601f19603f3d011682016040523d82523d6000602084013e611b2c565b606091505b5091509150611b3c828286611b47565b979650505050505050565b60608315611b56575081611850565b825115611b665782518084602001fd5b8160405162461bcd60e51b815260040161038e9190612fe5565b60008083601f840112611b9257600080fd5b50813567ffffffffffffffff811115611baa57600080fd5b602083019150836020828501011115611bc257600080fd5b9250929050565b803567ffffffffffffffff81168114611be157600080fd5b919050565b6001600160a01b0381168114610c8657600080fd5b8035611be181611be6565b60008060008060008060808789031215611c1f57600080fd5b863567ffffffffffffffff80821115611c3757600080fd5b611c438a838b01611b80565b9098509650869150611c5760208a01611bc9565b95506040890135915080821115611c6d57600080fd5b50611c7a89828a01611b80565b9094509250506060870135611c8e81611be6565b809150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611cd457634e487b7160e01b600052602160045260246000fd5b91905290565b600080600080600060808688031215611cf257600080fd5b8535611cfd81611be6565b945060208601359350604086013567ffffffffffffffff811115611d2057600080fd5b611d2c88828901611b80565b9094509250506060860135611d4081611be6565b809150509295509295909350565b600060208284031215611d6057600080fd5b813561185081611be6565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715611da457611da4611d6b565b60405290565b60405160e0810167ffffffffffffffff81118282101715611da457611da4611d6b565b60405160c0810167ffffffffffffffff81118282101715611da457611da4611d6b565b6040516101a0810167ffffffffffffffff81118282101715611da457611da4611d6b565b6040516080810167ffffffffffffffff81118282101715611da457611da4611d6b565b6040516060810167ffffffffffffffff81118282101715611da457611da4611d6b565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e8357611e83611d6b565b604052919050565b600067ffffffffffffffff821115611ea557611ea5611d6b565b50601f01601f191660200190565b600082601f830112611ec457600080fd5b8135611ed7611ed282611e8b565b611e5a565b818152846020838601011115611eec57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611f1f57600080fd5b8435611f2a81611be6565b93506020850135611f3a81611be6565b925060408501359150606085013567ffffffffffffffff811115611f5d57600080fd5b611f6987828801611eb3565b91505092959194509250565b60008060008060008060c08789031215611f8e57600080fd5b8635611f9981611be6565b95506020870135611fa981611be6565b945060408701359350611fbe60608801611bc9565b9250608087013567ffffffffffffffff811115611fda57600080fd5b611fe689828a01611eb3565b92505060a0870135611c8e81611be6565b60008060008060006080868803121561200f57600080fd5b853561201a81611be6565b945061202860208701611bc9565b9350604086013567ffffffffffffffff811115611d2057600080fd5b600067ffffffffffffffff82111561205e5761205e611d6b565b5060051b60200190565b60ff81168114610c8657600080fd5b8035611be181612068565b600082601f83011261209357600080fd5b813560206120a3611ed283612044565b82815260059290921b840181019181810190868411156120c257600080fd5b8286015b8481101561217857803567ffffffffffffffff808211156120e75760008081fd5b9088019060a0828b03601f19018113156121015760008081fd5b612109611d81565b8784013561211681611be6565b808252506040808501358983015260608086013582840152608091508186013561213f81612068565b908301529184013591838311156121565760008081fd5b6121648d8a85880101611eb3565b9082015286525050509183019183016120c6565b509695505050505050565b600060e0828403121561219557600080fd5b61219d611daa565b90506121a882611bfb565b8152602082013567ffffffffffffffff8111156121c457600080fd5b6121d084828501612082565b6020830152506121e260408301611bfb565b6040820152606082013560608201526080820135608082015260a082013560a082015261221160c08301612077565b60c082015292915050565b600060c0828403121561222e57600080fd5b612236611dcd565b9050813567ffffffffffffffff81111561224f57600080fd5b8201601f8101841361226057600080fd5b80356020612270611ed283612044565b82815260059290921b8301810191818101908784111561228f57600080fd5b938201935b838510156122ad57843582529382019390820190612294565b8552508481013590840152505060408083013590820152606080830135908201526122da60808301611bfb565b60808201526122eb60a08301611bfb565b60a082015292915050565b60006101a0828403121561230957600080fd5b612311611df0565b90508135815261232360208301611bfb565b602082015260408201356040820152606082013560608201526080820135608082015261235260a08301612077565b60a082015261236360c08301611bfb565b60c082015261237460e08301611bfb565b60e0820152610100828101359082015261012080830135908201526101408083013567ffffffffffffffff808211156123ac57600080fd5b6123b88683870161221c565b838501526101609250828501359150808211156123d457600080fd5b506123e185828601612082565b82840152505061018080830135818301525092915050565b60006080828403121561240b57600080fd5b612413611e14565b9050813567ffffffffffffffff8082111561242d57600080fd5b61243985838601612183565b8352602084013591508082111561244f57600080fd5b61245b858386016122f6565b6020840152604084013591508082111561247457600080fd5b61248085838601611eb3565b6040840152606084013591508082111561249957600080fd5b506124a684828501611eb3565b60608301525092915050565b600080600080600080600060e0888a0312156124cd57600080fd5b6124d688611bc9565b965060208801356124e681611be6565b955060408801356124f681611be6565b9450606088013561250681611be6565b93506080880135925060a088013563ffffffff8116811461252657600080fd5b915060c088013567ffffffffffffffff81111561254257600080fd5b61254e8a828b016123f9565b91505092959891949750929550565b60006020828403121561256f57600080fd5b813567ffffffffffffffff8082111561258757600080fd5b908301906060828603121561259b57600080fd5b6125a3611e37565b82356125ae81611be6565b815260208301356125be81611be6565b60208201526040830135828111156125d557600080fd5b6125e1878286016123f9565b60408301525095945050505050565b8051611be181611be6565b8051611be181612068565b60005b83811015612621578181015183820152602001612609565b50506000910152565b600082601f83011261263b57600080fd5b8151612649611ed282611e8b565b81815284602083860101111561265e57600080fd5b61266f826020830160208701612606565b949350505050565b600082601f83011261268857600080fd5b81516020612698611ed283612044565b82815260059290921b840181019181810190868411156126b757600080fd5b8286015b8481101561217857805167ffffffffffffffff808211156126dc5760008081fd5b9088019060a0828b03601f19018113156126f65760008081fd5b6126fe611d81565b8784015161270b81611be6565b808252506040808501518983015260608086015182840152608091508186015161273481612068565b9083015291840151918383111561274b5760008081fd5b6127598d8a8588010161262a565b9082015286525050509183019183016126bb565b600060e0828403121561277f57600080fd5b612787611daa565b9050612792826125f0565b8152602082015167ffffffffffffffff8111156127ae57600080fd5b6127ba84828501612677565b6020830152506127cc604083016125f0565b6040820152606082015160608201526080820151608082015260a082015160a082015261221160c083016125fb565b600060c0828403121561280d57600080fd5b612815611dcd565b9050815167ffffffffffffffff81111561282e57600080fd5b8201601f8101841361283f57600080fd5b8051602061284f611ed283612044565b82815260059290921b8301810191818101908784111561286e57600080fd5b938201935b8385101561288c57845182529382019390820190612873565b8552508481015190840152505060408083015190820152606080830151908201526128b9608083016125f0565b60808201526122eb60a083016125f0565b60006101a082840312156128dd57600080fd5b6128e5611df0565b9050815181526128f7602083016125f0565b602082015260408201516040820152606082015160608201526080820151608082015261292660a083016125fb565b60a082015261293760c083016125f0565b60c082015261294860e083016125f0565b60e0820152610100828101519082015261012080830151908201526101408083015167ffffffffffffffff8082111561298057600080fd5b61298c868387016127fb565b838501526101609250828501519150808211156129a857600080fd5b506129b585828601612677565b82840152505061018080830151818301525092915050565b6000602082840312156129df57600080fd5b815167ffffffffffffffff808211156129f757600080fd5b9083019060608286031215612a0b57600080fd5b612a13611e37565b8251612a1e81611be6565b81526020830151612a2e81611be6565b6020820152604083015182811115612a4557600080fd5b929092019160808387031215612a5a57600080fd5b612a62611e14565b835183811115612a7157600080fd5b612a7d8882870161276d565b825250602084015183811115612a9257600080fd5b612a9e888287016128ca565b602083015250604084015183811115612ab657600080fd5b612ac28882870161262a565b604083015250606084015183811115612ada57600080fd5b612ae68882870161262a565b606083015250604082015295945050505050565b60008151808452612b12816020860160208601612606565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612bae578284038952815180516001600160a01b0316855285810151868601526040808201519086015260608082015160ff169086015260809081015160a091860182905290612b9a81870183612afa565b9a87019a9550505090840190600101612b44565b5091979650505050505050565b60006001600160a01b03808351168452602083015160e06020860152612be460e0860182612b26565b9050816040850151166040860152606084015160608601526080840151608086015260a084015160a086015260ff60c08501511660c0860152809250505092915050565b805160c080845281519084018190526000916020919082019060e0860190845b81811015612c6457835183529284019291840191600101612c48565b50508285015183870152604085015160408701526060850151606087015260808501519250612c9e60808701846001600160a01b03169052565b60a0850151925061049760a08701846001600160a01b03169052565b60006101a0825184526020830151612cdd60208601826001600160a01b03169052565b5060408301516040850152606083015160608501526080830151608085015260a0830151612d1060a086018260ff169052565b5060c0830151612d2b60c08601826001600160a01b03169052565b5060e0830151612d4660e08601826001600160a01b03169052565b506101008381015190850152610120808401519085015261014080840151818601839052612d7683870182612c28565b925050506101608084015185830382870152612d928382612b26565b61018095860151969095019590955250919392505050565b608081526000612dbd6080830187612bbb565b8281036020840152612dcf8187612cba565b90508281036040840152612de38186612afa565b90508281036060840152611b3c8185612afa565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612e3557612e35612e0d565b5060010190565b81810381811115612e4f57612e4f612e0d565b92915050565b67ffffffffffffffff818116838216019080821115612e7657612e76612e0d565b5092915050565b6020815260006001600160a01b038084511660208401528060208501511660408401525060408301516060808401528051608080850152612ec2610100850182612bbb565b90506020820151607f19808684030160a0870152612ee08383612cba565b925060408401519150808684030160c0870152612efd8383612afa565b925060608401519350808684030160e087015250506104978183612afa565b600060208284031215612f2e57600080fd5b5051919050565b60006001600160a01b03808816835267ffffffffffffffff8716602084015280861660408401525083606083015260a06080830152611b3c60a0830184612afa565b600060208284031215612f8957600080fd5b8151801515811461185057600080fd5b600060208284031215612fab57600080fd5b815161185081611be6565b80820180821115612e4f57612e4f612e0d565b60008251612fdb818460208701612606565b9190910192915050565b6020815260006118506020830184612afa56fea26469706673582212207b2631804acaffdde4976c65cd5fc0d9488c87d2099bc53940dee9e38e4b67d164736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeMessage(address,uint64,bytes,address)": {
        "params": {
          "_executor": "Address who called the MessageBus execution function",
          "_message": "Arbitrary message bytes originated from and encoded by the source app contract",
          "_sender": "The address of the source app contract",
          "_srcChainId": "The source chain ID where the transfer is originated from"
        }
      },
      "executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)": {
        "params": {
          "amount": "The amount of the transfer",
          "dstToken": "the token used on destination chain",
          "message": "packed PurchaseRequest"
        }
      },
      "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": {
        "params": {
          "amount": "The amount of the transfer",
          "message": "packed PurchaseRequest",
          "token": "the token used on destination chain"
        }
      },
      "executeMessageWithTransferRefund(address,uint256,bytes,address)": {
        "params": {
          "amount": "The amount of the transfer",
          "message": "packed PurchaseRequest",
          "token": "the token used on source chain"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "purchase(uint64,address,address,address,uint256,uint32,((address,(address,uint256,uint256,uint8,bytes)[],address,uint256,uint256,bytes32,uint8),(bytes32,address,uint256,bytes32,uint256,uint8,address,address,uint256,uint256,(uint256[],uint256,uint256,uint256,address,address),(address,uint256,uint256,uint8,bytes)[],uint256),bytes,bytes))": {
        "params": {
          "amount": "The amount of the transfer",
          "dstChainId": "the destination chain to purchase NFT on",
          "dstCrossChainEndpoint": "the CrossChainEndpoint contract on the destination chain",
          "maxSlippage": "The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.",
          "order": "input order, accquired from the Tofu backend server",
          "receiver": "the address on destination chain to receive target NFT",
          "srcToken": "The address of the transfer token."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMessage(address,uint64,bytes,address)": {
        "notice": "Called by MessageBus (MessageBusReceiver)"
      },
      "executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)": {
        "notice": "called by executor on the dst chain to execute the NFT purchase"
      },
      "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": {
        "notice": "called only if handleMessageWithTransfer was reverted (etc, NFT sold out)"
      },
      "executeMessageWithTransferRefund(address,uint256,bytes,address)": {
        "notice": "called on source chain for handling of bridge failures (bad liquidity, bad slippage, etc...)"
      },
      "purchase(uint64,address,address,address,uint256,uint32,((address,(address,uint256,uint256,uint8,bytes)[],address,uint256,uint256,bytes32,uint8),(bytes32,address,uint256,bytes32,uint256,uint8,address,address,uint256,uint256,(uint256[],uint256,uint256,uint256,address,address),(address,uint256,uint256,uint8,bytes)[],uint256),bytes,bytes))": {
        "notice": "initiates a cross-chain call the the _chainId chain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CrossChainEndpoint.sol:CrossChainEndpoint",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2174,
        "contract": "contracts/CrossChainEndpoint.sol:CrossChainEndpoint",
        "label": "messageBus",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1099,
        "contract": "contracts/CrossChainEndpoint.sol:CrossChainEndpoint",
        "label": "marketNG",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1101,
        "contract": "contracts/CrossChainEndpoint.sol:CrossChainEndpoint",
        "label": "nonce",
        "offset": 20,
        "slot": "2",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}